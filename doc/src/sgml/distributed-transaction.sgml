<!-- doc/src/sgml/distributed-transaction.sgml -->

<chapter id="distributed-transaction">
 <title>Distributed Transaction Management</title>

 <para>
  This chapter explains what distributed transaction management is, and how it can be configured
  in PostgreSQL.
 </para>

 <sect1 id="atomic-commit">
  <title>Atomic Commit</title>

  <para>
   Atomic commit of distributed transaction is an operation that applies a set of changes
   as a single operation globally. <productname>PostgreSQL</productname> provides a way
   to perform read-write transactions with foreign resources using
   <literal>Foreign Data Wrapper</literal>. Using the <productname>PostgreSQL</productname>'s
   atomic commit ensures that all changes on foreign servers end in either commit or
   rollback using the transaction callback routines
   (see <xref linkend="fdw-callbacks-transaction-managements"/>).
  </para>

  <sect2>
   <title>Atomic Commit Using Two-phase Commit Protocol</title>

   <para>
    To achieve commit among all foreign servers automatially,
    <productname>PostgreSQL</productname> employs two-phase commit protocol, which is a
    type of atomic commitment protocol (ACP). Using two-phase commit protocol, the commit
    sequence of distributed transaction performs with the following steps.
    <orderedlist>
     <listitem>
      <para>
       Prepare all transactions on foreign servers.
      </para>
     </listitem>
     <listitem>
      <para>
       Commit locally.
      </para>
     </listitem>
     <listitem>
      <para>
       Resolve all prepared transaction on foreign servers.
      </para>
     </listitem>
    </orderedlist>

   </para>

   <para>
    At the first step, <productname>PostgreSQL</productname> distributed transaction manager
    prepares all transaction on the foreign servers if two-phase commit is required.
    Two-phase commit is required when the transaction modifies data on two or more servers
    including the local server itself and <xref linkend="guc-distributed-atomic-commit"/>
    is <literal>required</literal> or <literal>prefer</literal>. If all preparations on
    foreign servers got successful go to the next step. Any failure happens in this step
    <productname>PostgreSQL</productname> changes to rollback, then rollback all transactions
    on both local and foreign servers.
   </para>

   <para>
    At the local commit step, <productname>PostgreSQL</productname> commit the transaction
    locally. Any failure happens in this step <productname>PostgreSQL</productname> changes
    rollback, then rollback all transactions on both local and foreign servers.
   </para>

   <para>
    At the final step, prepared transactions are resolved by a foreign Transaction
    resolver process.
   </para>
  </sect2>

  <sect2 id="atomic-commit-transaction-resolution">
   <title>Foreign Transaction Resolver Processes</title>

   <para>
    Foreign transaction resolutions are performed by foreign transaction resolver process.
    They commit or rollback all prepared transaction on foreign servers if the coordinator
    received agreement messages from all foreign servers during the first step. On the other
    hand, if any foreign server failed to prepare the transaction, it rollbacks all prepared
    transactions.
   </para>

   <para>
    One foreign transaction resolver is responsible for transaction resolutions on one
    database of the coordinator side. On failure during resolution, they retries to
    resolve after <varname>foreign_transaction_resolution_interval</varname>.
   </para>

   <note>
    <para>
     During a foreign transaction resolver process connecting to the database, database
     cannot be dropped. So to drop the database, you can call
     <function>pg_stop_all_fdwxact_resolvers</function> function after disabled
     <xref linkend="guc-distributed-atomic-commit"/>.
    </para>
   </note>
  </sect2>

  <sect2 id="atomic-commit-in-doubt-transaction">
   <title>Handling In-doubt Transactions</title>

   <para>
    The atomic commit mechanism ensures that all foreign servers either commit or rollback
    using two-phase commit protocol. However, in case we loose connectivity to the foreign
    server or crash the coordinator, the transaction becomes in-doubt.
    In-doubt transactions are periodically dealt with by foreign transaction resolver
    process when there is no online transaction requesting resolutions.
    <function>pg_resolve_fdw_xact</function> provides a way to resolve transactions on foreign
    servers manually that participated the distributed transaction manually.
   </para>
  </sect2>

  <sect2 id="atomic-commit-monitoring">
   <title>Monitoring</title>
   <para>
    The monitoring information about foreign transaction resolvers is visible in
    <link linkend="pg-stat-fdwxact-resolver-view"><literal>pg_stat_fdwxact_resolver</literal></link>
    view. This view contains one row for every foreign transaction resolver worker.
   </para>
  </sect2>

  <sect2>
   <title>Configuration Settings</title>

   <para>
    Atomic commit requires several configuration options to be set.
   </para>

   <para>
    On the coordinator side, <xref linkend="guc-max-prepared-foreign-transactions"/> and
    <xref linkend="guc-max-foreign-transaction-resolvers"/> must be non-zero value.
    Additionally the <varname>max_worker_processes</varname> may need to be adjusted to
    accommodate for foreign transaction resolver workers, at least
    (<varname>max_foreign_transaction_resolvers</varname> + <literal>1</literal>).
    Note that some extensions and parallel queries also take worker slots from
    <varname>max_worker_processes</varname>.
   </para>

  </sect2>
 </sect1>
</chapter>
